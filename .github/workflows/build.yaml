name: CI

on:
  push:
    # Publish these branches
    branches:
      - main
  # Run tests for any PRs.
  pull_request:

jobs:
    test:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: "6.0.x"
            - uses: xt0rted/dotnet-format-problem-matcher@v1
            - run: dotnet restore
            - run: dotnet build
            - name: dotnet format check
              run: dotnet format whitespace --verify-no-changes
            - name: test
              if:
                  (github.event_name == 'pull_request_target' && github.event.pull_request.user.login == 'dependabot[bot]') ||
                  (github.event_name == 'pull_request' && github.event.pull_request.user.login != 'dependabot[bot]') ||
                  github.event_name == 'push'
              env:
                  MANDRILL_API_KEY: ${{ secrets.MANDRILL_API_KEY }}
                  MANDRILL_SENDING_DOMAIN: ${{ secrets.MANDRILL_SENDING_DOMAIN }}
              run: dotnet test tests --configuration Release --logger "console;verbosity=normal" -p:CollectCoverage=true -p:CoverletOutputFormat=lcov -p:CoverletOutput=./coverage.lcov
            - name: Push coverage result
              if:
                  (github.event_name == 'pull_request_target' && github.event.pull_request.user.login == 'dependabot[bot]') ||
                  (github.event_name == 'pull_request' && github.event.pull_request.user.login != 'dependabot[bot]') ||
                  github.event_name == 'push'
              uses: coverallsapp/github-action@v2.2.3
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  path-to-lcov: ./tests/coverage.lcov

    publish-nuget:
        needs: test
        runs-on: ubuntu-latest
        # tag a release as v1.0.0....
        if: startsWith(github.ref, 'refs/tags/v')
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: "6.0.x"

            - name: pack
              run: dotnet pack --configuration Release -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg --output artifacts

            - name: push
              env:
                  NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
              run: dotnet nuget push artifacts/*.nupkg -k $NUGET_API_KEY -s https://api.nuget.org/v3/index.json --skip-duplicate
